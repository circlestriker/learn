* go的特点
go 能解决的问题, java 也能,甚至解决得更好

对于开发量在 100人月上下的项目, 同样的业务管理, go 实现要比 java , 在部署/运维上, 成本要降很多.

如果是 100人月以上的项目, 开发人员在30人以上.基本还是选择容易招人的开发语言( 与开发语言对应的成熟 架框/库). java 挺好招人. go 就不要选择了( 深圳宝安某几个公司, 招 go 开发人员, 招聘信息处处发, 都发了快一年了, 还在四处挂着招人)

go不止学习成本低这么简单，并发成本更低

一切皆异步

? 协程和线程的区别
协程:用户态"线程"，不是真正的线程。一个线程里可以创建多个协程。
线程创建需要操作系统api，协程不需要，协程在编程语言层面即可完成操作。
//可以理解为有线程的方便，但是比线程轻便易用

将静态语言的安全性和高效性与动态语言的易开发性进行有机结合

Go 语言中仍有指针的存在，但并不允许进行指针运算。

Go 语言的另一个目标是对于网络通信、并发和并行编程的极佳支持，从而更好地利用大量的分布式和多核的计算机。

构建速度（编译和链接到机器代码的速度）很快

Go 语言还能够在运行时进行反射相关的操作。

Go 语言还支持调用由 C 语言编写的海量库文件。

Go 语言支持交叉编译

imports runtime: cannot find package "runtime" in any of:


在 Go 的 server 里，通常每来一个请求都会启动若干个 goroutine 同时工作：有些去数据库拿数据，有些调用下游接口获取相关数据等等。
Go 语言中的 server 实际上是一个“协程模型”，也就是说一个协程处理一个请求。
context 用来解决 goroutine 之间退出通知、元数据传递的功能。
有协程，就需要context管理和协调多个协程。


* 安装
安装新版本前需要删除旧版本
apt-get remove --auto-remove golang-go
删除go及其依赖

tar -C /usr/local -xzf go1.14.4.linux-amd64.tar.gz

export PATH=$PATH:/usr/local/go/bin
export GOROOT=/usr/local/go
export GOPATH=/home/wj/Go
